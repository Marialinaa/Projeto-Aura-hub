import { Request, Response } from 'express';
import HorarioModel, { Horario } from '../models/Horario';

export const registrarEntrada = async (req: Request, res: Response) => {
  try {
    console.log('üïí Registrando entrada:', req.body);
    
    const { bolsista_id, nome_atividade } = req.body;
    
    if (!bolsista_id) {
      console.log('‚ùå ID do bolsista n√£o fornecido');
      return res.status(400).json({ 
        success: false, 
        message: 'ID do bolsista √© obrigat√≥rio' 
      });
    }
    
    // Data e hora atuais
    const dataHoje = new Date().toISOString().split('T')[0];
    const horaAtual = new Date().toTimeString().slice(0, 8);
    
    const horario: Horario = {
      bolsista_id: Number(bolsista_id),
      data_registro: dataHoje,
      hora_entrada: horaAtual,
      nome_atividade: nome_atividade || 'Atividade do dia'
    };
    
    // Registrar entrada
    const novoHorario = await HorarioModel.registrarEntrada(horario);
    
    console.log('‚úÖ Entrada registrada com sucesso:', novoHorario);
    return res.status(201).json({
      success: true,
      message: 'Entrada registrada com sucesso',
      data: novoHorario
    });
  } catch (error: any) {
    console.error('‚ùå Erro ao registrar entrada:', error);
    return res.status(500).json({
      success: false,
      message: 'Erro ao registrar entrada',
      error: error.message
    });
  }
};

export const registrarSaida = async (req: Request, res: Response) => {
  try {
    console.log('üïí Registrando sa√≠da:', req.body);
    
    const { bolsista_id } = req.body;
    
    if (!bolsista_id) {
      console.log('‚ùå ID do bolsista n√£o fornecido');
      return res.status(400).json({ 
        success: false, 
        message: 'ID do bolsista √© obrigat√≥rio' 
      });
    }
    
    // Data e hora atuais
    const dataHoje = new Date().toISOString().split('T')[0];
    const horaAtual = new Date().toTimeString().slice(0, 8);
    
    // Observa√ß√µes opcionais
    const observacoes = req.body.observacoes;
    
    // Registrar sa√≠da
    const horarioAtualizado = await HorarioModel.registrarSaida(
      Number(bolsista_id), 
      dataHoje, 
      horaAtual,
      observacoes
    );
    
    if (!horarioAtualizado) {
      console.log('‚ùå Nenhum registro de entrada encontrado para hoje');
      return res.status(404).json({
        success: false,
        message: 'Nenhum registro de entrada encontrado para hoje'
      });
    }
    
    console.log('‚úÖ Sa√≠da registrada com sucesso:', horarioAtualizado);
    return res.json({
      success: true,
      message: 'Sa√≠da registrada com sucesso',
      data: horarioAtualizado
    });
  } catch (error: any) {
    console.error('‚ùå Erro ao registrar sa√≠da:', error);
    return res.status(500).json({
      success: false,
      message: 'Erro ao registrar sa√≠da',
      error: error.message
    });
  }
};

export const listarHorarios = async (req: Request, res: Response) => {
  try {
    console.log('üîç Listando hor√°rios:', req.query);
    
    const bolsista_id = Number(req.query.bolsista_id);
    const data_inicio = req.query.data_inicio as string | undefined;
    const data_fim = req.query.data_fim as string | undefined;
    
    if (!bolsista_id) {
      console.log('‚ùå ID do bolsista n√£o fornecido');
      return res.status(400).json({ 
        success: false, 
        message: 'ID do bolsista √© obrigat√≥rio' 
      });
    }
    
    const horarios = await HorarioModel.listarPorBolsista(bolsista_id, data_inicio, data_fim);
    
    console.log(`‚úÖ ${horarios.length} hor√°rios encontrados`);
    return res.json({
      success: true,
      message: 'Hor√°rios listados com sucesso',
      data: horarios
    });
  } catch (error: any) {
    console.error('‚ùå Erro ao listar hor√°rios:', error);
    return res.status(500).json({
      success: false,
      message: 'Erro ao listar hor√°rios',
      error: error.message
    });
  }
};

export const buscarHorarioHoje = async (req: Request, res: Response) => {
  try {
    console.log('üîç Buscando hor√°rio de hoje:', req.params);
    
    const bolsista_id = Number(req.params.bolsista_id);
    
    if (!bolsista_id) {
      console.log('‚ùå ID do bolsista n√£o fornecido');
      return res.status(400).json({ 
        success: false, 
        message: 'ID do bolsista √© obrigat√≥rio' 
      });
    }
    
    const horarioHoje = await HorarioModel.buscarHorarioHoje(bolsista_id);
    
    if (!horarioHoje) {
      console.log('‚ùì Nenhum registro encontrado para hoje');
      return res.json({
        success: true,
        message: 'Nenhum registro encontrado para hoje',
        data: null
      });
    }
    
    console.log('‚úÖ Hor√°rio de hoje encontrado:', horarioHoje);
    return res.json({
      success: true,
      message: 'Hor√°rio de hoje encontrado',
      data: horarioHoje
    });
  } catch (error: any) {
    console.error('‚ùå Erro ao buscar hor√°rio de hoje:', error);
    return res.status(500).json({
      success: false,
      message: 'Erro ao buscar hor√°rio de hoje',
      error: error.message
    });
  }
};

export const obterEstatisticas = async (req: Request, res: Response) => {
  try {
    console.log('üìä Obtendo estat√≠sticas:', req.query);
    
    const bolsista_id = Number(req.query.bolsista_id);
    const data_inicio = req.query.data_inicio as string | undefined;
    const data_fim = req.query.data_fim as string | undefined;
    
    if (!bolsista_id) {
      console.log('‚ùå ID do bolsista n√£o fornecido');
      return res.status(400).json({ 
        success: false, 
        message: 'ID do bolsista √© obrigat√≥rio' 
      });
    }
    
    const estatisticas = await HorarioModel.obterEstatisticas(bolsista_id, data_inicio, data_fim);
    
    console.log(`‚úÖ ${estatisticas.length} registros estat√≠sticos processados`);
    return res.json({
      success: true,
      message: 'Estat√≠sticas obtidas com sucesso',
      data: estatisticas
    });
  } catch (error: any) {
    console.error('‚ùå Erro ao obter estat√≠sticas:', error);
    return res.status(500).json({
      success: false,
      message: 'Erro ao obter estat√≠sticas',
      error: error.message
    });
  }
};

export default {
  registrarEntrada,
  registrarSaida,
  listarHorarios,
  buscarHorarioHoje,
  obterEstatisticas
};
